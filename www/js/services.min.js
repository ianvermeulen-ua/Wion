angular.module('roots.services')

.factory('Bookmark', ["$http", "$filter", "$localstorage", function($http, $filter, $localstorage) {

	var items = [];

	if($localstorage.getObject( 'bookmark_items' )!==null){
		items = $localstorage.getObject( 'bookmark_items' );
	}

	return {
		all: function(data){
			return items;
		},
		save: function(item){
			items.push(item);
			$localstorage.setObject('bookmark_items', items);
		},
		getById: function(id){
			var postID = parseInt(id);
			var selected_post = $filter('filter')(items, function (d) {return d.id === postID;});
			return selected_post[0];
		},
		deleteById: function(id) {
			var postID = parseInt(id);
			items = $filter('filter')(items, function(value, index) {
				return value.id !== postID;
			});
			$localstorage.setObject('bookmark_items', items);
		}
	};

}]);
angular.module('roots.services')

.factory('Calendar', ["$http", "$rootScope", "$location", "$localstorage", function($http, $rootScope, $location, $localstorage) {

  var calendar = [];

  if(typeof $localstorage.get("calendar") !== 'undefined' && $localstorage.get("calendar")!==null){
    calendar = $localstorage.getObject("calendar");
  }

  return {
    set: function(data){
      calendar = data;
      $localstorage.setObject('calendar', data);
    },
    get: function(){
      return calendar;
    },
    fetch: function(){
      return $http.jsonp( encodeURI( api+'user/get_events?callback=JSON_CALLBACK' ) );
    }
  };

}]);
angular.module('roots.services')

.factory('Category', ["$http", "$filter", function($http, $filter) {

	var items = [];

	return {
		all: function(data){
			items = data;
		},
		getById: function(id){
			var catID = parseInt(id);
			var selected_category = $filter('filter')(items, function (d) {return d.id === catID;});
			return selected_category[0];
		},
		getBySlug: function(slug){
			var catSlug = slug;
			var selected_category = $filter('filter')(items, function (d) {return d.slug === catSlug;});
			return selected_category[0];
		},
		get: function(image_size, taxonomy, orderby) {

			var setOrderby = 'name';
			if(orderby !== undefined){
				setOrderby = orderby;
			}

			if (taxonomy !== undefined){
				return $http.jsonp(api+'roots/get_categories/?image_size='+image_size+'&taxonomy='+taxonomy+'&orderby='+setOrderby+'&callback=JSON_CALLBACK');
			}
			return $http.jsonp(api+'roots/get_categories/?image_size='+image_size+'&orderby='+setOrderby+'&callback=JSON_CALLBACK');
		}
	};

}]);
angular.module('roots.services')

.factory('Comment', ["$http", "$filter", "User", function($http, $filter, User) {

	return {
		getFromPost: function(id, post_type) {
			return $http.jsonp(api+'get_posts/?post__in[]='+id+'&post_type=' + post_type +'&callback=JSON_CALLBACK');
		},
		submit: function(postID, comment){
			comment = encodeURI(comment);
			var name = encodeURI(User.name());
			var email = encodeURI(User.email());
			console.log(name + ' ' + email);
			return $http.jsonp(api+'respond/submit_comment/?post_id='+postID+'&name='+name+'&email='+email+'&content=' + comment +'&callback=JSON_CALLBACK');
		}
	};

}]);
angular.module('roots.services')

.factory('ContactInfo', ["$http", "$filter", function($http, $filter) {

	var post_type = 'contact-info';
	var items = [
	             {
	            	'icon' : 'ion-ios-telephone-outline',
	            	'label' : 'Telefoon',
	            	'waarde' : '+324 84 00 00 01'
	             },
	             {
	            	'icon' : 'ion-ios-email-outline',
	            	'label' : 'E-mail',
	            	'waarde' : 'info@wikings.be'
	             }
    ];

	return {
		all: function(data){
			items = data;
		},
		getById: function(id){
			var postID = parseInt(id);
			var selected_post = $filter('filter')(items, function (d) {return d.id === postID;});
			return selected_post[0];
		},
		get: function() {
			return $http.jsonp(api+'get_posts/?post_type=' + post_type +'&posts_per_page=-1&callback=JSON_CALLBACK');
		},
		getFromCategory: function(catID, page, posts_per_page){
			return $http.jsonp(api+'get_posts/?cat='+catID+'&page='+page+'&post_type=' + post_type +'&posts_per_page='+ posts_per_page +'&callback=JSON_CALLBACK');
		}
	};

}]);
angular.module('roots.services')

.factory('Gallery', ["$http", "$rootScope", "$location", "$localstorage", function($http, $rootScope, $location, $localstorage) {

  var items = [];
  var post_type = 'gallery';
  var custom_field = 'photos';


  return {
    all: function(data){
      items = data;
    },
    get: function(){
      return items;
    },
    getById: function(gallery_id){
      return $http.jsonp( encodeURI ( api+'roots/get_photos/?gallery_id='+ gallery_id +'&post_type='+ post_type +'&custom_field='+ custom_field +'&callback=JSON_CALLBACK' ) );
    }
  };

}]);
angular.module('roots.services')

.factory('$localstorage', ['$window', function($window) {

  return {
    set: function(key, value) {
      $window.localStorage[key] = value;
    },
    get: function(key, defaultValue) {
      return $window.localStorage[key] || defaultValue;
    },
    setObject: function(key, value) {
      $window.localStorage[key] = JSON.stringify(value);
    },
    getObject: function(key) {
      return JSON.parse($window.localStorage[key] || null );
    },
    remove: function(key){
      $window.localStorage.removeItem(key);
    }
  };

}]);

angular.module('roots.services')

.factory('MobilePage', ["$http", "$filter", function($http, $filter) {

	var post_type = 'mobile-page';
	var items = [
	             {
					 'section-slug' : 'about',
					 'content' : 'Wij zijn Wikings.'
				 }
    ];

	var category = '';

	return {
		all: function(data){
			items = data;
		},
		setCategory : function(newCategory) {
			category = newCategory;
		},
		get: function() {
			return $http.jsonp(api + 'get_category_posts/?slug=' + category + '&post_type=' + post_type + '&callback=JSON_CALLBACK');
		}
	};

}]);
angular.module('roots.services')

.factory('Post', ["$http", "$filter", function($http, $filter) {

	var post_type = 'post';
	var items = [];

	return {
		all: function(data){
			items = data;
		},
		getById: function(id){
			var postID = parseInt(id);
			var selected_post = $filter('filter')(items, function (d) {return d.id === postID;});
			return selected_post[0];
		},
		get: function(page, posts_per_page) {
			return $http.jsonp(api+'get_posts/?page='+page+'&post_type=' + post_type +'&posts_per_page='+ posts_per_page +'&callback=JSON_CALLBACK');
		},
		getFromCategory: function(catID, page, posts_per_page){
			return $http.jsonp(api+'get_posts/?cat='+catID+'&page='+page+'&post_type=' + post_type +'&posts_per_page='+ posts_per_page +'&callback=JSON_CALLBACK');
		}
	};

}]);
angular.module('roots.services')

.factory('PostTax', ["$http", "$filter", function($http, $filter) {

	var items = [];

	return {
		all: function(data){
			items = data;
		},
		getById: function(id){
			var postID = parseInt(id);
			var selected_post = $filter('filter')(items, function (d) {return d.id === postID;});
			return selected_post[0];
		},
		get: function(page, post_type, taxonomy, slug, posts_per_page) {
			return $http.jsonp(api+'roots/get_taxonomy_posts/?page='+page+'&post_type=' + post_type +'&taxonomy=' + taxonomy +'&slug=' + slug +'&posts_per_page='+ posts_per_page +'&callback=JSON_CALLBACK');
		}
	};

}]);
angular.module('roots.services')

.factory('Search', ["$http", "$filter", function($http, $filter) {

	// Define the post type that you want to search, if you leave it empty it will search across all the post types
	var post_type = 'post';
	var items = [];

	return {
		all: function(data){
			items = data;
		},
		getItemById: function(id){
			var postID = parseInt(id);
			var selected_post = $filter('filter')(items, function (d) {return d.id === postID;});
			return selected_post[0];
		},
		query: function(keyword, page, posts_per_page) {
			return $http.jsonp(api+'get_search_results/?search='+keyword+'&page='+page+'&post_type=' + post_type +'&posts_per_page='+ posts_per_page +'&callback=JSON_CALLBACK');
		}
	};

}]);

angular.module('roots.services')

.factory('User', ["$http", "$rootScope", "$location", "$localstorage", function($http, $rootScope, $location, $localstorage) {

  var isLoggedIn = false;
  var profile = {};

  if(typeof $localstorage.get("token") !== 'undefined' && $localstorage.get("token")!==null){
    isLoggedIn = true;
  }

  if(typeof $localstorage.get("user") !== 'undefined' && $localstorage.get("user")!==null){
    profile = $localstorage.getObject("user");
  }

  $rootScope.$on('user.logout', function() {
    isLoggedIn = false;
    $location.path('/auth/index');
  });

  $rootScope.$on('user.login', function() {
    isLoggedIn = true;
  });

  return {
    set: function(data){
      profile = data;
      $localstorage.setObject('user', data);
    },
    get: function(){
      return profile;
    },
    id: function() {
      return profile.id;
    },
    name: function(){
      return profile.firstname + ' ' + profile.lastname;
    },
    nickname: function(){
      return profile.nickname;
    },
    email: function(){
      return profile.email;
    },
    role : function() {
      return profile.role;
    },
    isLoggedIn: function() {
      return isLoggedIn;
    },
    register: function(nonce, firstName, lastName, email, password, study, year){
      var registerRequest = $http.jsonp( encodeURI( api+'user/register/?nonce='+nonce+
      '&display_name='+firstName+'%20'+lastName+
        '&first_name='+firstName+
        '&last_name='+lastName+
        '&email='+email+
        '&user_pass='+password+
        '&notify=no&callback=JSON_CALLBACK' ) );

        registerRequest.success( function( registerResponse ) {
          if ( registerResponse.status === 'ok' ) {
            var cookie = registerResponse.cookie;

            var updateRequest = $http.jsonp( encodeURI( api + 'user/update_user_meta_vars/?cookie='+cookie+
            '&study='+study+
            '&year='+year+
            '&notify=no&callback=JSON_CALLBACK' ) );
          }
        } );

        return registerRequest;
    },
    getAuthNonce: function(){
      return $http.jsonp(api+'get_nonce/?controller=user&method=generate_auth_cookie&callback=JSON_CALLBACK');
    },
    getRegisterNonce: function(){
      return $http.jsonp(api+'get_nonce/?controller=user&method=register&callback=JSON_CALLBACK');
    },
    requestMembership: function(cookie) {
      return $http.jsonp( encodeURI( api+'user/request_user_membership/?cookie='+cookie+'&callback=JSON_CALLBACK' ) );
    },
    getInfo: function(user_id){
      return $http.jsonp( encodeURI( api+'user/get_userinfo/?user_id='+user_id+'&callback=JSON_CALLBACK' ) );
    },
    login: function(nonce, username, password) {
      return $http.jsonp( encodeURI( api+'user/generate_auth_cookie/?nonce='+nonce+'&username='+username+'&password='+password+'&callback=JSON_CALLBACK' ) );
    },
    forgotPassword: function(username){
      return $http.jsonp( encodeURI( api+'user/retrieve_password/?user_login='+username+'&callback=JSON_CALLBACK' ) );
    },
    logout: function() {
      $localstorage.remove("token");
      $localstorage.remove("user");
      $rootScope.$broadcast('user.logout');
    }
  };

}]);

angular.module('roots.services')

.factory('Walkthrough', ["$filter", "$localstorage", function($filter, $localstorage) {

	var wasShown = false;

	if(typeof $localstorage.get("walkthrough") !== 'undefined' && $localstorage.get("walkthrough")!==null){
		wasShown = true;
	}

	return {
		hasBeenShown: function(){
			return wasShown;
		},
		markAsShown: function(){
			wasShown = true;
			$localstorage.set('walkthrough', 'seen');
		}
	};

}]);
